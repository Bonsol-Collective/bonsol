"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelInstructionT = exports.ChannelInstruction = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
const channel_instruction_ix_type_js_1 = require("./channel-instruction-ix-type.js");
class ChannelInstruction {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsChannelInstruction(bb, obj) {
        return (obj || new ChannelInstruction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsChannelInstruction(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ChannelInstruction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ixType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : channel_instruction_ix_type_js_1.ChannelInstructionIxType.ExecuteV1;
    }
    mutate_ix_type(value) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint8(this.bb_pos + offset, value);
        return true;
    }
    executeV1(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    executeV1Length() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    executeV1Array() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    statusV1(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    statusV1Length() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    statusV1Array() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    deployV1(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    deployV1Length() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    deployV1Array() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    claimV1(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    claimV1Length() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    claimV1Array() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    inputSetV1(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inputSetV1Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inputSetV1Array() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startChannelInstruction(builder) {
        builder.startObject(6);
    }
    static addIxType(builder, ixType) {
        builder.addFieldInt8(0, ixType, channel_instruction_ix_type_js_1.ChannelInstructionIxType.ExecuteV1);
    }
    static addExecuteV1(builder, executeV1Offset) {
        builder.addFieldOffset(1, executeV1Offset, 0);
    }
    static createExecuteV1Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startExecuteV1Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addStatusV1(builder, statusV1Offset) {
        builder.addFieldOffset(2, statusV1Offset, 0);
    }
    static createStatusV1Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startStatusV1Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addDeployV1(builder, deployV1Offset) {
        builder.addFieldOffset(3, deployV1Offset, 0);
    }
    static createDeployV1Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startDeployV1Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addClaimV1(builder, claimV1Offset) {
        builder.addFieldOffset(4, claimV1Offset, 0);
    }
    static createClaimV1Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startClaimV1Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addInputSetV1(builder, inputSetV1Offset) {
        builder.addFieldOffset(5, inputSetV1Offset, 0);
    }
    static createInputSetV1Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInputSetV1Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endChannelInstruction(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishChannelInstructionBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedChannelInstructionBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createChannelInstruction(builder, ixType, executeV1Offset, statusV1Offset, deployV1Offset, claimV1Offset, inputSetV1Offset) {
        ChannelInstruction.startChannelInstruction(builder);
        ChannelInstruction.addIxType(builder, ixType);
        ChannelInstruction.addExecuteV1(builder, executeV1Offset);
        ChannelInstruction.addStatusV1(builder, statusV1Offset);
        ChannelInstruction.addDeployV1(builder, deployV1Offset);
        ChannelInstruction.addClaimV1(builder, claimV1Offset);
        ChannelInstruction.addInputSetV1(builder, inputSetV1Offset);
        return ChannelInstruction.endChannelInstruction(builder);
    }
    unpack() {
        return new ChannelInstructionT(this.ixType(), this.bb.createScalarList(this.executeV1.bind(this), this.executeV1Length()), this.bb.createScalarList(this.statusV1.bind(this), this.statusV1Length()), this.bb.createScalarList(this.deployV1.bind(this), this.deployV1Length()), this.bb.createScalarList(this.claimV1.bind(this), this.claimV1Length()), this.bb.createScalarList(this.inputSetV1.bind(this), this.inputSetV1Length()));
    }
    unpackTo(_o) {
        _o.ixType = this.ixType();
        _o.executeV1 = this.bb.createScalarList(this.executeV1.bind(this), this.executeV1Length());
        _o.statusV1 = this.bb.createScalarList(this.statusV1.bind(this), this.statusV1Length());
        _o.deployV1 = this.bb.createScalarList(this.deployV1.bind(this), this.deployV1Length());
        _o.claimV1 = this.bb.createScalarList(this.claimV1.bind(this), this.claimV1Length());
        _o.inputSetV1 = this.bb.createScalarList(this.inputSetV1.bind(this), this.inputSetV1Length());
    }
}
exports.ChannelInstruction = ChannelInstruction;
class ChannelInstructionT {
    constructor(ixType = channel_instruction_ix_type_js_1.ChannelInstructionIxType.ExecuteV1, executeV1 = [], statusV1 = [], deployV1 = [], claimV1 = [], inputSetV1 = []) {
        this.ixType = ixType;
        this.executeV1 = executeV1;
        this.statusV1 = statusV1;
        this.deployV1 = deployV1;
        this.claimV1 = claimV1;
        this.inputSetV1 = inputSetV1;
    }
    pack(builder) {
        const executeV1 = ChannelInstruction.createExecuteV1Vector(builder, this.executeV1);
        const statusV1 = ChannelInstruction.createStatusV1Vector(builder, this.statusV1);
        const deployV1 = ChannelInstruction.createDeployV1Vector(builder, this.deployV1);
        const claimV1 = ChannelInstruction.createClaimV1Vector(builder, this.claimV1);
        const inputSetV1 = ChannelInstruction.createInputSetV1Vector(builder, this.inputSetV1);
        return ChannelInstruction.createChannelInstruction(builder, this.ixType, executeV1, statusV1, deployV1, claimV1, inputSetV1);
    }
}
exports.ChannelInstructionT = ChannelInstructionT;
