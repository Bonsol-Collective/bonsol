"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusV1T = exports.StatusV1 = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = __importStar(require("flatbuffers"));
const status_types_js_1 = require("./status-types.js");
class StatusV1 {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStatusV1(bb, obj) {
        return (obj || new StatusV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStatusV1(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StatusV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    executionId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    status() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : status_types_js_1.StatusTypes.Unknown;
    }
    mutate_status(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint8(this.bb_pos + offset, value);
        return true;
    }
    proof(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    proofLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    proofArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    executionDigest(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    executionDigestLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    executionDigestArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    inputDigest(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inputDigestLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inputDigestArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    committedOutputs(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    committedOutputsLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    committedOutputsArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    assumptionDigest(index) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    assumptionDigestLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    assumptionDigestArray() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    exitCodeSystem() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    mutate_exit_code_system(value) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint32(this.bb_pos + offset, value);
        return true;
    }
    exitCodeUser() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    mutate_exit_code_user(value) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint32(this.bb_pos + offset, value);
        return true;
    }
    static startStatusV1(builder) {
        builder.startObject(9);
    }
    static addExecutionId(builder, executionIdOffset) {
        builder.addFieldOffset(0, executionIdOffset, 0);
    }
    static addStatus(builder, status) {
        builder.addFieldInt8(1, status, status_types_js_1.StatusTypes.Unknown);
    }
    static addProof(builder, proofOffset) {
        builder.addFieldOffset(2, proofOffset, 0);
    }
    static createProofVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startProofVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addExecutionDigest(builder, executionDigestOffset) {
        builder.addFieldOffset(3, executionDigestOffset, 0);
    }
    static createExecutionDigestVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startExecutionDigestVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addInputDigest(builder, inputDigestOffset) {
        builder.addFieldOffset(4, inputDigestOffset, 0);
    }
    static createInputDigestVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInputDigestVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addCommittedOutputs(builder, committedOutputsOffset) {
        builder.addFieldOffset(5, committedOutputsOffset, 0);
    }
    static createCommittedOutputsVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startCommittedOutputsVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addAssumptionDigest(builder, assumptionDigestOffset) {
        builder.addFieldOffset(6, assumptionDigestOffset, 0);
    }
    static createAssumptionDigestVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startAssumptionDigestVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addExitCodeSystem(builder, exitCodeSystem) {
        builder.addFieldInt32(7, exitCodeSystem, 0);
    }
    static addExitCodeUser(builder, exitCodeUser) {
        builder.addFieldInt32(8, exitCodeUser, 0);
    }
    static endStatusV1(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishStatusV1Buffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedStatusV1Buffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createStatusV1(builder, executionIdOffset, status, proofOffset, executionDigestOffset, inputDigestOffset, committedOutputsOffset, assumptionDigestOffset, exitCodeSystem, exitCodeUser) {
        StatusV1.startStatusV1(builder);
        StatusV1.addExecutionId(builder, executionIdOffset);
        StatusV1.addStatus(builder, status);
        StatusV1.addProof(builder, proofOffset);
        StatusV1.addExecutionDigest(builder, executionDigestOffset);
        StatusV1.addInputDigest(builder, inputDigestOffset);
        StatusV1.addCommittedOutputs(builder, committedOutputsOffset);
        StatusV1.addAssumptionDigest(builder, assumptionDigestOffset);
        StatusV1.addExitCodeSystem(builder, exitCodeSystem);
        StatusV1.addExitCodeUser(builder, exitCodeUser);
        return StatusV1.endStatusV1(builder);
    }
    unpack() {
        return new StatusV1T(this.executionId(), this.status(), this.bb.createScalarList(this.proof.bind(this), this.proofLength()), this.bb.createScalarList(this.executionDigest.bind(this), this.executionDigestLength()), this.bb.createScalarList(this.inputDigest.bind(this), this.inputDigestLength()), this.bb.createScalarList(this.committedOutputs.bind(this), this.committedOutputsLength()), this.bb.createScalarList(this.assumptionDigest.bind(this), this.assumptionDigestLength()), this.exitCodeSystem(), this.exitCodeUser());
    }
    unpackTo(_o) {
        _o.executionId = this.executionId();
        _o.status = this.status();
        _o.proof = this.bb.createScalarList(this.proof.bind(this), this.proofLength());
        _o.executionDigest = this.bb.createScalarList(this.executionDigest.bind(this), this.executionDigestLength());
        _o.inputDigest = this.bb.createScalarList(this.inputDigest.bind(this), this.inputDigestLength());
        _o.committedOutputs = this.bb.createScalarList(this.committedOutputs.bind(this), this.committedOutputsLength());
        _o.assumptionDigest = this.bb.createScalarList(this.assumptionDigest.bind(this), this.assumptionDigestLength());
        _o.exitCodeSystem = this.exitCodeSystem();
        _o.exitCodeUser = this.exitCodeUser();
    }
}
exports.StatusV1 = StatusV1;
class StatusV1T {
    constructor(executionId = null, status = status_types_js_1.StatusTypes.Unknown, proof = [], executionDigest = [], inputDigest = [], committedOutputs = [], assumptionDigest = [], exitCodeSystem = 0, exitCodeUser = 0) {
        this.executionId = executionId;
        this.status = status;
        this.proof = proof;
        this.executionDigest = executionDigest;
        this.inputDigest = inputDigest;
        this.committedOutputs = committedOutputs;
        this.assumptionDigest = assumptionDigest;
        this.exitCodeSystem = exitCodeSystem;
        this.exitCodeUser = exitCodeUser;
    }
    pack(builder) {
        const executionId = (this.executionId !== null ? builder.createString(this.executionId) : 0);
        const proof = StatusV1.createProofVector(builder, this.proof);
        const executionDigest = StatusV1.createExecutionDigestVector(builder, this.executionDigest);
        const inputDigest = StatusV1.createInputDigestVector(builder, this.inputDigest);
        const committedOutputs = StatusV1.createCommittedOutputsVector(builder, this.committedOutputs);
        const assumptionDigest = StatusV1.createAssumptionDigestVector(builder, this.assumptionDigest);
        return StatusV1.createStatusV1(builder, executionId, this.status, proof, executionDigest, inputDigest, committedOutputs, assumptionDigest, this.exitCodeSystem, this.exitCodeUser);
    }
}
exports.StatusV1T = StatusV1T;
