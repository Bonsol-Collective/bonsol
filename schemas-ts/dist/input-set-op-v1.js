"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputSetOpV1T = exports.InputSetOpV1 = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
const input_js_1 = require("./input.js");
const input_set_op_js_1 = require("./input-set-op.js");
class InputSetOpV1 {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsInputSetOpV1(bb, obj) {
        return (obj || new InputSetOpV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsInputSetOpV1(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new InputSetOpV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    op() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : input_set_op_js_1.InputSetOp.Create;
    }
    mutate_op(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint8(this.bb_pos + offset, value);
        return true;
    }
    inputs(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new input_js_1.Input()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    inputsLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startInputSetOpV1(builder) {
        builder.startObject(3);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addOp(builder, op) {
        builder.addFieldInt8(1, op, input_set_op_js_1.InputSetOp.Create);
    }
    static addInputs(builder, inputsOffset) {
        builder.addFieldOffset(2, inputsOffset, 0);
    }
    static createInputsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startInputsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endInputSetOpV1(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishInputSetOpV1Buffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedInputSetOpV1Buffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createInputSetOpV1(builder, idOffset, op, inputsOffset) {
        InputSetOpV1.startInputSetOpV1(builder);
        InputSetOpV1.addId(builder, idOffset);
        InputSetOpV1.addOp(builder, op);
        InputSetOpV1.addInputs(builder, inputsOffset);
        return InputSetOpV1.endInputSetOpV1(builder);
    }
    unpack() {
        return new InputSetOpV1T(this.id(), this.op(), this.bb.createObjList(this.inputs.bind(this), this.inputsLength()));
    }
    unpackTo(_o) {
        _o.id = this.id();
        _o.op = this.op();
        _o.inputs = this.bb.createObjList(this.inputs.bind(this), this.inputsLength());
    }
}
exports.InputSetOpV1 = InputSetOpV1;
class InputSetOpV1T {
    constructor(id = null, op = input_set_op_js_1.InputSetOp.Create, inputs = []) {
        this.id = id;
        this.op = op;
        this.inputs = inputs;
    }
    pack(builder) {
        const id = (this.id !== null ? builder.createString(this.id) : 0);
        const inputs = InputSetOpV1.createInputsVector(builder, builder.createObjectOffsetList(this.inputs));
        return InputSetOpV1.createInputSetOpV1(builder, id, this.op, inputs);
    }
}
exports.InputSetOpV1T = InputSetOpV1T;
