import * as flatbuffers from 'flatbuffers';
import { StatusTypes } from './status-types.js';
export declare class StatusV1 {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): StatusV1;
    static getRootAsStatusV1(bb: flatbuffers.ByteBuffer, obj?: StatusV1): StatusV1;
    static getSizePrefixedRootAsStatusV1(bb: flatbuffers.ByteBuffer, obj?: StatusV1): StatusV1;
    executionId(): string | null;
    executionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    status(): StatusTypes;
    mutate_status(value: StatusTypes): boolean;
    proof(index: number): number | null;
    proofLength(): number;
    proofArray(): Uint8Array | null;
    executionDigest(index: number): number | null;
    executionDigestLength(): number;
    executionDigestArray(): Uint8Array | null;
    inputDigest(index: number): number | null;
    inputDigestLength(): number;
    inputDigestArray(): Uint8Array | null;
    committedOutputs(index: number): number | null;
    committedOutputsLength(): number;
    committedOutputsArray(): Uint8Array | null;
    assumptionDigest(index: number): number | null;
    assumptionDigestLength(): number;
    assumptionDigestArray(): Uint8Array | null;
    exitCodeSystem(): number;
    mutate_exit_code_system(value: number): boolean;
    exitCodeUser(): number;
    mutate_exit_code_user(value: number): boolean;
    static startStatusV1(builder: flatbuffers.Builder): void;
    static addExecutionId(builder: flatbuffers.Builder, executionIdOffset: flatbuffers.Offset): void;
    static addStatus(builder: flatbuffers.Builder, status: StatusTypes): void;
    static addProof(builder: flatbuffers.Builder, proofOffset: flatbuffers.Offset): void;
    static createProofVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startProofVector(builder: flatbuffers.Builder, numElems: number): void;
    static addExecutionDigest(builder: flatbuffers.Builder, executionDigestOffset: flatbuffers.Offset): void;
    static createExecutionDigestVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startExecutionDigestVector(builder: flatbuffers.Builder, numElems: number): void;
    static addInputDigest(builder: flatbuffers.Builder, inputDigestOffset: flatbuffers.Offset): void;
    static createInputDigestVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startInputDigestVector(builder: flatbuffers.Builder, numElems: number): void;
    static addCommittedOutputs(builder: flatbuffers.Builder, committedOutputsOffset: flatbuffers.Offset): void;
    static createCommittedOutputsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startCommittedOutputsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addAssumptionDigest(builder: flatbuffers.Builder, assumptionDigestOffset: flatbuffers.Offset): void;
    static createAssumptionDigestVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static startAssumptionDigestVector(builder: flatbuffers.Builder, numElems: number): void;
    static addExitCodeSystem(builder: flatbuffers.Builder, exitCodeSystem: number): void;
    static addExitCodeUser(builder: flatbuffers.Builder, exitCodeUser: number): void;
    static endStatusV1(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishStatusV1Buffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedStatusV1Buffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createStatusV1(builder: flatbuffers.Builder, executionIdOffset: flatbuffers.Offset, status: StatusTypes, proofOffset: flatbuffers.Offset, executionDigestOffset: flatbuffers.Offset, inputDigestOffset: flatbuffers.Offset, committedOutputsOffset: flatbuffers.Offset, assumptionDigestOffset: flatbuffers.Offset, exitCodeSystem: number, exitCodeUser: number): flatbuffers.Offset;
}
