// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MIN_EXECUTION_INPUT_TYPE: u8 = 0;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
pub const ENUM_MAX_EXECUTION_INPUT_TYPE: u8 = 1;
#[deprecated(
    since = "2.0.0",
    note = "Use associated constants instead. This will no longer be generated in 2021."
)]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EXECUTION_INPUT_TYPE: [ExecutionInputType; 2] =
    [ExecutionInputType::URL, ExecutionInputType::DATA];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ExecutionInputType(pub u8);
#[allow(non_upper_case_globals)]
impl ExecutionInputType {
    pub const URL: Self = Self(0);
    pub const DATA: Self = Self(1);

    pub const ENUM_MIN: u8 = 0;
    pub const ENUM_MAX: u8 = 1;
    pub const ENUM_VALUES: &'static [Self] = &[Self::URL, Self::DATA];
    /// Returns the variant's name or "" if unknown.
    pub fn variant_name(self) -> Option<&'static str> {
        match self {
            Self::URL => Some("URL"),
            Self::DATA => Some("DATA"),
            _ => None,
        }
    }
}
impl core::fmt::Debug for ExecutionInputType {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        if let Some(name) = self.variant_name() {
            f.write_str(name)
        } else {
            f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
        }
    }
}
impl<'a> flatbuffers::Follow<'a> for ExecutionInputType {
    type Inner = Self;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
        Self(b)
    }
}

impl flatbuffers::Push for ExecutionInputType {
    type Output = ExecutionInputType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ExecutionInputType {
    type Scalar = u8;
    #[inline]
    fn to_little_endian(self) -> u8 {
        self.0.to_le()
    }
    #[inline]
    #[allow(clippy::wrong_self_convention)]
    fn from_little_endian(v: u8) -> Self {
        let b = u8::from_le(v);
        Self(b)
    }
}

impl<'a> flatbuffers::Verifiable for ExecutionInputType {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        u8::run_verifier(v, pos)
    }
}

impl flatbuffers::SimpleToVerifyInSlice for ExecutionInputType {}
pub enum ExecutionRequestV1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ExecutionRequestV1<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ExecutionRequestV1<'a> {
    type Inner = ExecutionRequestV1<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> ExecutionRequestV1<'a> {
    pub const VT_INPUT_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_TIP: flatbuffers::VOffsetT = 6;
    pub const VT_EXECUTION_ID: flatbuffers::VOffsetT = 8;
    pub const VT_IMAGE_ID: flatbuffers::VOffsetT = 10;
    pub const VT_CALLBACK_PROGRAM_ID: flatbuffers::VOffsetT = 12;
    pub const VT_CALLBACK_INSTRUCTION_PREFIX: flatbuffers::VOffsetT = 14;
    pub const VT_INPUT_DATA: flatbuffers::VOffsetT = 16;
    pub const VT_INPUT_DIGEST: flatbuffers::VOffsetT = 18;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ExecutionRequestV1 { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ExecutionRequestV1Args<'args>,
    ) -> flatbuffers::WIPOffset<ExecutionRequestV1<'bldr>> {
        let mut builder = ExecutionRequestV1Builder::new(_fbb);
        builder.add_tip(args.tip);
        if let Some(x) = args.input_digest {
            builder.add_input_digest(x);
        }
        if let Some(x) = args.input_data {
            builder.add_input_data(x);
        }
        if let Some(x) = args.callback_instruction_prefix {
            builder.add_callback_instruction_prefix(x);
        }
        if let Some(x) = args.callback_program_id {
            builder.add_callback_program_id(x);
        }
        if let Some(x) = args.image_id {
            builder.add_image_id(x);
        }
        if let Some(x) = args.execution_id {
            builder.add_execution_id(x);
        }
        builder.add_input_type(args.input_type);
        builder.finish()
    }

    #[inline]
    pub fn input_type(&self) -> ExecutionInputType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ExecutionInputType>(
                    ExecutionRequestV1::VT_INPUT_TYPE,
                    Some(ExecutionInputType::URL),
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn tip(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(ExecutionRequestV1::VT_TIP, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn execution_id(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(
                ExecutionRequestV1::VT_EXECUTION_ID,
                None,
            )
        }
    }
    #[inline]
    pub fn image_id(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(ExecutionRequestV1::VT_IMAGE_ID, None)
        }
    }
    #[inline]
    pub fn callback_program_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ExecutionRequestV1::VT_CALLBACK_PROGRAM_ID,
                    None,
                )
        }
    }
    #[inline]
    pub fn callback_instruction_prefix(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ExecutionRequestV1::VT_CALLBACK_INSTRUCTION_PREFIX,
                    None,
                )
        }
    }
    #[inline]
    pub fn input_data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ExecutionRequestV1::VT_INPUT_DATA,
                    None,
                )
        }
    }
    #[inline]
    pub fn input_digest(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ExecutionRequestV1::VT_INPUT_DIGEST,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for ExecutionRequestV1<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<ExecutionInputType>("input_type", Self::VT_INPUT_TYPE, false)?
            .visit_field::<u64>("tip", Self::VT_TIP, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "execution_id",
                Self::VT_EXECUTION_ID,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "image_id",
                Self::VT_IMAGE_ID,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "callback_program_id",
                Self::VT_CALLBACK_PROGRAM_ID,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "callback_instruction_prefix",
                Self::VT_CALLBACK_INSTRUCTION_PREFIX,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "input_data",
                Self::VT_INPUT_DATA,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "input_digest",
                Self::VT_INPUT_DIGEST,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct ExecutionRequestV1Args<'a> {
    pub input_type: ExecutionInputType,
    pub tip: u64,
    pub execution_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub image_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callback_program_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub callback_instruction_prefix: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub input_data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub input_digest: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for ExecutionRequestV1Args<'a> {
    #[inline]
    fn default() -> Self {
        ExecutionRequestV1Args {
            input_type: ExecutionInputType::URL,
            tip: 0,
            execution_id: None,
            image_id: None,
            callback_program_id: None,
            callback_instruction_prefix: None,
            input_data: None,
            input_digest: None,
        }
    }
}

pub struct ExecutionRequestV1Builder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ExecutionRequestV1Builder<'a, 'b> {
    #[inline]
    pub fn add_input_type(&mut self, input_type: ExecutionInputType) {
        self.fbb_.push_slot::<ExecutionInputType>(
            ExecutionRequestV1::VT_INPUT_TYPE,
            input_type,
            ExecutionInputType::URL,
        );
    }
    #[inline]
    pub fn add_tip(&mut self, tip: u64) {
        self.fbb_
            .push_slot::<u64>(ExecutionRequestV1::VT_TIP, tip, 0);
    }
    #[inline]
    pub fn add_execution_id(&mut self, execution_id: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_EXECUTION_ID,
            execution_id,
        );
    }
    #[inline]
    pub fn add_image_id(&mut self, image_id: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_IMAGE_ID,
            image_id,
        );
    }
    #[inline]
    pub fn add_callback_program_id(
        &mut self,
        callback_program_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_CALLBACK_PROGRAM_ID,
            callback_program_id,
        );
    }
    #[inline]
    pub fn add_callback_instruction_prefix(
        &mut self,
        callback_instruction_prefix: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_CALLBACK_INSTRUCTION_PREFIX,
            callback_instruction_prefix,
        );
    }
    #[inline]
    pub fn add_input_data(
        &mut self,
        input_data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_INPUT_DATA,
            input_data,
        );
    }
    #[inline]
    pub fn add_input_digest(
        &mut self,
        input_digest: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ExecutionRequestV1::VT_INPUT_DIGEST,
            input_digest,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> ExecutionRequestV1Builder<'a, 'b> {
        let start = _fbb.start_table();
        ExecutionRequestV1Builder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ExecutionRequestV1<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for ExecutionRequestV1<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("ExecutionRequestV1");
        ds.field("input_type", &self.input_type());
        ds.field("tip", &self.tip());
        ds.field("execution_id", &self.execution_id());
        ds.field("image_id", &self.image_id());
        ds.field("callback_program_id", &self.callback_program_id());
        ds.field(
            "callback_instruction_prefix",
            &self.callback_instruction_prefix(),
        );
        ds.field("input_data", &self.input_data());
        ds.field("input_digest", &self.input_digest());
        ds.finish()
    }
}
pub enum InputsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Inputs<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Inputs<'a> {
    type Inner = Inputs<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> Inputs<'a> {
    pub const VT_PUBLIC_INPUTS: flatbuffers::VOffsetT = 4;
    pub const VT_PRIVATE_INPUTS: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Inputs { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args InputsArgs<'args>,
    ) -> flatbuffers::WIPOffset<Inputs<'bldr>> {
        let mut builder = InputsBuilder::new(_fbb);
        if let Some(x) = args.private_inputs {
            builder.add_private_inputs(x);
        }
        if let Some(x) = args.public_inputs {
            builder.add_public_inputs(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn public_inputs(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Inputs::VT_PUBLIC_INPUTS,
                    None,
                )
        }
    }
    #[inline]
    pub fn private_inputs(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>,
            >>(Inputs::VT_PRIVATE_INPUTS, None)
        }
    }
}

impl flatbuffers::Verifiable for Inputs<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "public_inputs",
                Self::VT_PUBLIC_INPUTS,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>,
            >>("private_inputs", Self::VT_PRIVATE_INPUTS, false)?
            .finish();
        Ok(())
    }
}
pub struct InputsArgs<'a> {
    pub public_inputs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub private_inputs: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>,
    >,
}
impl<'a> Default for InputsArgs<'a> {
    #[inline]
    fn default() -> Self {
        InputsArgs {
            public_inputs: None,
            private_inputs: None,
        }
    }
}

pub struct InputsBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InputsBuilder<'a, 'b> {
    #[inline]
    pub fn add_public_inputs(
        &mut self,
        public_inputs: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Inputs::VT_PUBLIC_INPUTS, public_inputs);
    }
    #[inline]
    pub fn add_private_inputs(
        &mut self,
        private_inputs: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<&'b str>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            Inputs::VT_PRIVATE_INPUTS,
            private_inputs,
        );
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InputsBuilder<'a, 'b> {
        let start = _fbb.start_table();
        InputsBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Inputs<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for Inputs<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("Inputs");
        ds.field("public_inputs", &self.public_inputs());
        ds.field("private_inputs", &self.private_inputs());
        ds.finish()
    }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ExecutionRequestV1`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_execution_request_v1_unchecked`.
pub fn root_as_execution_request_v1(
    buf: &[u8],
) -> Result<ExecutionRequestV1, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<ExecutionRequestV1>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ExecutionRequestV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_execution_request_v1_unchecked`.
pub fn size_prefixed_root_as_execution_request_v1(
    buf: &[u8],
) -> Result<ExecutionRequestV1, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<ExecutionRequestV1>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ExecutionRequestV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_execution_request_v1_unchecked`.
pub fn root_as_execution_request_v1_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ExecutionRequestV1<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<ExecutionRequestV1<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ExecutionRequestV1` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_execution_request_v1_unchecked`.
pub fn size_prefixed_root_as_execution_request_v1_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ExecutionRequestV1<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<ExecutionRequestV1<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ExecutionRequestV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ExecutionRequestV1`.
pub unsafe fn root_as_execution_request_v1_unchecked(buf: &[u8]) -> ExecutionRequestV1 {
    flatbuffers::root_unchecked::<ExecutionRequestV1>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ExecutionRequestV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ExecutionRequestV1`.
pub unsafe fn size_prefixed_root_as_execution_request_v1_unchecked(
    buf: &[u8],
) -> ExecutionRequestV1 {
    flatbuffers::size_prefixed_root_unchecked::<ExecutionRequestV1>(buf)
}
#[inline]
pub fn finish_execution_request_v1_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ExecutionRequestV1<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_execution_request_v1_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ExecutionRequestV1<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
